package br.com.locadora.view;

import br.com.locadora.conexao.InterfacePool;
import br.com.locadora.conexao.Pool;
import br.com.locadora.model.bean.AcessoUsuario;
import br.com.locadora.model.bean.Cliente;
import br.com.locadora.model.bean.Copia;
import br.com.locadora.model.bean.Devolucao;
import br.com.locadora.model.bean.Diaria;
import br.com.locadora.model.bean.Feriado;
import br.com.locadora.model.bean.ItemLancamento;
import br.com.locadora.model.bean.ItemLocacao;
import br.com.locadora.model.bean.Lancamento;
import br.com.locadora.model.bean.Locacao;
import br.com.locadora.model.bean.Objeto;
import br.com.locadora.model.bean.PromocaoLocacao;
import br.com.locadora.model.bean.TipoServico;
import br.com.locadora.model.bean.Usuario;
import br.com.locadora.model.bean.Venda;
import br.com.locadora.model.dao.ClienteDAO;
import br.com.locadora.model.dao.CopiaDAO;
import br.com.locadora.model.dao.DiariaDAO;
import br.com.locadora.model.dao.FeriadoDAO;
import br.com.locadora.model.dao.LancamentoDAO;
import br.com.locadora.model.dao.LocacaoDAO;
import br.com.locadora.model.dao.UsuarioDAO;
import br.com.locadora.util.ArquivoConfiguracao;
import br.com.locadora.util.Printer;
import br.com.locadora.util.LimitadorTexto;
import br.com.locadora.util.Moeda;
import br.com.locadora.util.TemaInterface;
import br.com.locadora.util.UnaccentedDocument;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALENCAR
 */
public final class EntradaCaixaLocacao extends javax.swing.JFrame {

    public AtendimentoLocacao janelapaiLocacao;
    public InterfacePool pool;
    public String action;
    public Moeda moeda;
    public List<ItemLocacao> itensLocacaoSalvar;
    private int salvar = 0;
    public LancamentoDAO lancamentoDAO;
    public LocacaoDAO locacaoDAO;
    public Lancamento lancamento;
    public Cliente cliente;
    public List<Feriado> feriados;

    /**
     * Creates new form ProdutoCadastroGUI
     */
    public EntradaCaixaLocacao() {
        initComponents();
        TemaInterface.getInterface(this);
        janelapaiLocacao = null;
    }

    //public ProdutoConsultarGUI janelapaim;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tfa_similar = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jtf_login = new javax.swing.JTextField();
        jpf_senha = new javax.swing.JPasswordField();
        jb_logar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jtf_desconto = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jl_saldo = new javax.swing.JLabel();
        jtf_saldo = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jLabel12 = new javax.swing.JLabel();
        jtf_valor_total_a_pagar = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jLabel6 = new javax.swing.JLabel();
        jtf_valor_pago = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jLabel1 = new javax.swing.JLabel();
        jtf_valor_total_locacao = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jLabel7 = new javax.swing.JLabel();
        jtf_troco = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jLabel8 = new javax.swing.JLabel();
        jtf_debito_atual = new javax.swing.JTextField(new LimitadorTexto(80), "",10);
        jPanel3 = new javax.swing.JPanel();
        jb_salvar = new javax.swing.JButton();
        jb_imprimir = new javax.swing.JButton();
        jb_cancelar1 = new javax.swing.JButton();

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tfa_similar.setColumns(20);
        tfa_similar.setRows(5);
        tfa_similar.setName("tfa_similar"); // NOI18N
        jScrollPane1.setViewportView(tfa_similar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Caixa - Atendimento Locação");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Verificar Permissão"));
        jPanel1.setName("jPanel1"); // NOI18N

        jtf_login.setEditable(false);
        jtf_login.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jtf_login.setName("jtf_login"); // NOI18N
        jtf_login.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_loginKeyPressed(evt);
            }
        });

        jpf_senha.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jpf_senha.setName("jpf_senha"); // NOI18N
        jpf_senha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jpf_senhaKeyPressed(evt);
            }
        });

        jb_logar.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jb_logar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/login.png"))); // NOI18N
        jb_logar.setText("Entrar");
        jb_logar.setName("jb_logar"); // NOI18N
        jb_logar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_logarActionPerformed(evt);
            }
        });
        jb_logar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jb_logarKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jLabel2.setText("Login:");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jLabel3.setText("Senha:");
        jLabel3.setName("jLabel3"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(115, 115, 115))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtf_login)
                        .addGap(5, 5, 5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jpf_senha, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jb_logar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpf_senha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jb_logar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(1, 1, 1)
                        .addComponent(jtf_login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jb_logar, jpf_senha, jtf_login});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Caixa"));
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Valor Desconto (+)");
        jLabel5.setName("jLabel5"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_desconto.setEditable(false);
        jtf_desconto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_desconto.setText("R$ 0,00");
        jtf_desconto.setEnabled(false);
        jtf_desconto.setName("jtf_desconto"); // NOI18N
        jtf_desconto.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_desconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_descontoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_descontoFocusLost(evt);
            }
        });
        jtf_desconto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_descontoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_descontoKeyReleased(evt);
            }
        });

        jl_saldo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jl_saldo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jl_saldo.setText("Saldo (+)");
        jl_saldo.setName("jl_saldo"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_saldo.setEditable(false);
        jtf_saldo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_saldo.setText("R$ 0,00");
        jtf_saldo.setName("jtf_saldo"); // NOI18N
        jtf_saldo.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_saldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_saldoActionPerformed(evt);
            }
        });
        jtf_saldo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_saldoFocusGained(evt);
            }
        });
        jtf_saldo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_saldoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_saldoKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Total À Pagar (=)");
        jLabel12.setName("jLabel12"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_valor_total_a_pagar.setEditable(false);
        jtf_valor_total_a_pagar.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_valor_total_a_pagar.setForeground(new java.awt.Color(204, 0, 0));
        jtf_valor_total_a_pagar.setText("R$ 0,00");
        jtf_valor_total_a_pagar.setName("jtf_valor_total_a_pagar"); // NOI18N
        jtf_valor_total_a_pagar.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_valor_total_a_pagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_valor_total_a_pagarActionPerformed(evt);
            }
        });
        jtf_valor_total_a_pagar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_valor_total_a_pagarFocusGained(evt);
            }
        });
        jtf_valor_total_a_pagar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_valor_total_a_pagarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_valor_total_a_pagarKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Valor Pago (+)");
        jLabel6.setName("jLabel6"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_valor_pago.setEditable(false);
        jtf_valor_pago.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_valor_pago.setText("R$ 0,00");
        jtf_valor_pago.setEnabled(false);
        jtf_valor_pago.setName("jtf_valor_pago"); // NOI18N
        jtf_valor_pago.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_valor_pago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_valor_pagoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_valor_pagoFocusLost(evt);
            }
        });
        jtf_valor_pago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_valor_pagoKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Total Locação (-)");
        jLabel1.setName("jLabel1"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_valor_total_locacao.setEditable(false);
        jtf_valor_total_locacao.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_valor_total_locacao.setForeground(new java.awt.Color(204, 0, 0));
        jtf_valor_total_locacao.setText("R$ 0,00");
        jtf_valor_total_locacao.setName("jtf_valor_total_locacao");
        jtf_valor_total_locacao.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_valor_total_locacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_valor_total_locacaoActionPerformed(evt);
            }
        });
        jtf_valor_total_locacao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_valor_total_locacaoFocusGained(evt);
            }
        });
        jtf_valor_total_locacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_valor_total_locacaoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_valor_total_locacaoKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Troco (+)");
        jLabel7.setName("jLabel7"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_troco.setEditable(false);
        jtf_troco.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_troco.setText("R$ 0,00");
        jtf_troco.setName("jtf_troco"); // NOI18N
        jtf_troco.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_troco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_trocoActionPerformed(evt);
            }
        });
        jtf_troco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_trocoFocusGained(evt);
            }
        });
        jtf_troco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_trocoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_trocoKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Débito Atual (-)");
        jLabel8.setName("jLabel8"); // NOI18N

        jtf_valor_total_locacao.setDocument(new UnaccentedDocument());
        jtf_debito_atual.setEditable(false);
        jtf_debito_atual.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jtf_debito_atual.setText("R$ 0,00");
        jtf_debito_atual.setName("jtf_debito_atual"); // NOI18N
        jtf_debito_atual.setPreferredSize(new java.awt.Dimension(120, 29));
        jtf_debito_atual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_debito_atualActionPerformed(evt);
            }
        });
        jtf_debito_atual.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_debito_atualFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_debito_atualFocusLost(evt);
            }
        });
        jtf_debito_atual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_debito_atualKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_debito_atualKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jtf_valor_total_locacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jl_saldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(5, 5, 5)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jtf_saldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jtf_valor_pago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jtf_valor_total_a_pagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jtf_desconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtf_troco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jtf_debito_atual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_saldo)
                    .addComponent(jtf_saldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_valor_total_locacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_valor_total_a_pagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_valor_pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_desconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_troco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_debito_atual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(10, 10, 10))
        );

        jPanel3.setName("jPanel3"); // NOI18N

        jb_salvar.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jb_salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/save.png"))); // NOI18N
        jb_salvar.setText("Salvar");
        jb_salvar.setEnabled(false);
        jb_salvar.setName("jb_salvar"); // NOI18N
        jb_salvar.setPreferredSize(new java.awt.Dimension(100, 40));
        jb_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salvarActionPerformed(evt);
            }
        });
        jb_salvar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jb_salvarKeyPressed(evt);
            }
        });

        jb_imprimir.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jb_imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/printer.png"))); // NOI18N
        jb_imprimir.setText("Imprimir");
        jb_imprimir.setEnabled(false);
        jb_imprimir.setMaximumSize(new java.awt.Dimension(101, 33));
        jb_imprimir.setName("jb_imprimir"); // NOI18N
        jb_imprimir.setPreferredSize(new java.awt.Dimension(100, 40));
        jb_imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_imprimirActionPerformed(evt);
            }
        });
        jb_imprimir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jb_imprimirKeyPressed(evt);
            }
        });

        jb_cancelar1.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jb_cancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/sair.png"))); // NOI18N
        jb_cancelar1.setText("Sair");
        jb_cancelar1.setMaximumSize(new java.awt.Dimension(101, 33));
        jb_cancelar1.setName("jb_cancelar1"); // NOI18N
        jb_cancelar1.setPreferredSize(new java.awt.Dimension(100, 40));
        jb_cancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_cancelar1ActionPerformed(evt);
            }
        });
        jb_cancelar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jb_cancelar1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jb_salvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_imprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_cancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_imprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_cancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_salvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jb_cancelar1, jb_imprimir, jb_salvar});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jb_imprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_imprimirActionPerformed
        imprimir();
}//GEN-LAST:event_jb_imprimirActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jpf_senha.requestFocus();
        if (janelapaiLocacao != null) {
            recalcularValores();
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        String nome_arquivo = "Imprimir/comprovanteLocacao_" + janelapaiLocacao.dependente.getNome_dependente() + ".txt";
        File arquivo = new File(nome_arquivo);
        arquivo.deleteOnExit();
        arquivo.delete();

        retornaJanelaPai();

    }//GEN-LAST:event_formWindowClosed

    private void jtf_valor_total_locacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_valor_total_locacaoKeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_locacaoKeyPressed
    private void jtf_valor_total_locacaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_valor_total_locacaoFocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_locacaoFocusGained

    private void jtf_valor_total_locacaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_valor_total_locacaoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_locacaoKeyReleased

    private void jtf_valor_total_locacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_valor_total_locacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_locacaoActionPerformed

    private void jtf_descontoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_descontoKeyPressed
        acionarAtalho(evt);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jb_salvar.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_descontoKeyPressed

    private void jtf_descontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_descontoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_descontoKeyReleased

    private void jtf_valor_pagoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_valor_pagoFocusGained
        jtf_valor_pago.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_pagoFocusGained

    private void jtf_valor_pagoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_valor_pagoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            System.out.println("Campo jtf_desconto == " + jtf_desconto.isEditable());
            moeda = new Moeda();
            if (jtf_valor_pago.getText().equals("")) {
                jtf_valor_pago.setText("R$ 0,00");
            }
            jb_salvar.requestFocus();

        }
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_pagoKeyPressed

    private void jtf_trocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_trocoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_trocoActionPerformed

    private void jtf_trocoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_trocoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_trocoFocusGained

    private void jtf_trocoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_trocoKeyPressed
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_trocoKeyPressed

    private void jtf_trocoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_trocoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_trocoKeyReleased

    private void jtf_saldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_saldoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_saldoActionPerformed

    private void jtf_saldoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_saldoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_saldoFocusGained

    private void jtf_saldoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_saldoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_saldoKeyPressed

    private void jtf_saldoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_saldoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_saldoKeyReleased

    private void jtf_valor_pagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_valor_pagoFocusLost
        recalcularValores();
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_pagoFocusLost

    private void jtf_loginKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_loginKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jpf_senha.requestFocus();
        }
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_loginKeyPressed

    private void jpf_senhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpf_senhaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jb_logar.doClick();
        }
        acionarAtalho(evt);
    }//GEN-LAST:event_jpf_senhaKeyPressed

    private void jb_logarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_logarActionPerformed
        entrar();
    }//GEN-LAST:event_jb_logarActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void jb_cancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_cancelar1ActionPerformed
        String nome_arquivo = "Imprimir/comprovanteLocacao_" + janelapaiLocacao.dependente.getNome_dependente() + ".txt";
        File arquivo = new File(nome_arquivo);
        arquivo.deleteOnExit();
        arquivo.delete();

        retornaJanelaPai();
// TODO add your handling code here:
    }//GEN-LAST:event_jb_cancelar1ActionPerformed

    private void jtf_valor_total_a_pagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_valor_total_a_pagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_a_pagarActionPerformed

    private void jtf_valor_total_a_pagarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_valor_total_a_pagarFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_a_pagarFocusGained

    private void jtf_valor_total_a_pagarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_valor_total_a_pagarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_a_pagarKeyPressed

    private void jtf_valor_total_a_pagarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_valor_total_a_pagarKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_valor_total_a_pagarKeyReleased

    private void jtf_debito_atualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_debito_atualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_debito_atualActionPerformed

    private void jtf_debito_atualFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_debito_atualFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_debito_atualFocusGained

    private void jtf_debito_atualFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_debito_atualFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_debito_atualFocusLost

    private void jtf_debito_atualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_debito_atualKeyPressed
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_debito_atualKeyPressed

    private void jtf_debito_atualKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_debito_atualKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_debito_atualKeyReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void jb_salvarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jb_salvarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jb_salvar.doClick();
        }
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_salvarKeyPressed

    private void jb_logarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jb_logarKeyPressed
        acionarAtalho(evt);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jb_logar.doClick();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_logarKeyPressed

    private void jb_imprimirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jb_imprimirKeyPressed
        acionarAtalho(evt);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jb_imprimir.doClick();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_imprimirKeyPressed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void jb_cancelar1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jb_cancelar1KeyPressed
        acionarAtalho(evt);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jb_cancelar1.doClick();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_cancelar1KeyPressed

    private void jtf_descontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_descontoFocusGained
        jtf_desconto.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_descontoFocusGained

    private void jtf_descontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_descontoFocusLost
        recalcularValores();
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_descontoFocusLost

    private void jb_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salvarActionPerformed
        if (jb_salvar.isEnabled()) {
            if (verificarTempoCadastro()) {
                recalcularValores();
                checarPagamento();
                finalizarCaixa();
            } else {
                moeda = new Moeda();
                Double valor_pago = moeda.getPrecoFormato(jtf_valor_pago.getText());
                Double desconto = moeda.getPrecoFormato(jtf_desconto.getText());
                Double valor_a_pagar = moeda.getPrecoFormato(jtf_valor_total_a_pagar.getText());

                Double resultado = (valor_a_pagar - (desconto + valor_pago));

                if (resultado <= 0) {
                    recalcularValores();
                    checarPagamento();
                    finalizarCaixa();
                } else {
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                                        
                    int selectedOption = JOptionPane.showConfirmDialog(this, "Cliente com Tempo Cadastro menor que 6 Meses: " + df.format(cliente.getData_cadastro()) + "\n Deseja Autorizar?", "Atenção", JOptionPane.YES_NO_OPTION);
                    if (selectedOption == JOptionPane.YES_NO_OPTION) {
                        recalcularValores();
                        checarPagamento();
                        finalizarCaixa();
                    }
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_salvarActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EntradaCaixaLocacao().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_cancelar1;
    private javax.swing.JButton jb_imprimir;
    private javax.swing.JButton jb_logar;
    private javax.swing.JButton jb_salvar;
    private javax.swing.JLabel jl_saldo;
    private javax.swing.JPasswordField jpf_senha;
    public static javax.swing.JTextField jtf_debito_atual;
    public static javax.swing.JTextField jtf_desconto;
    private javax.swing.JTextField jtf_login;
    public static javax.swing.JTextField jtf_saldo;
    public static javax.swing.JTextField jtf_troco;
    public static javax.swing.JTextField jtf_valor_pago;
    public static javax.swing.JTextField jtf_valor_total_a_pagar;
    public static javax.swing.JTextField jtf_valor_total_locacao;
    private javax.swing.JTextArea tfa_similar;
    // End of variables declaration//GEN-END:variables

    public boolean verificarTempoCadastro() {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

        pool = new Pool();
        ClienteDAO clienteDAO = new ClienteDAO(pool);
        cliente = clienteDAO.getCliente_codigo(janelapaiLocacao.dependente.getCliente().getCodigo_cliente()).get(0);

        if (cliente != null) {

            Calendar data_inicial = Calendar.getInstance();
            data_inicial.setTime(cliente.getData_cadastro());
            data_inicial.set(Calendar.HOUR_OF_DAY, 0);
            data_inicial.set(Calendar.MINUTE, 0);
            data_inicial.set(Calendar.SECOND, 0);
            data_inicial.set(Calendar.MILLISECOND, 0);
            data_inicial.getTime();

            Calendar data_final = Calendar.getInstance();
            data_final.set(Calendar.HOUR_OF_DAY, 0);
            data_final.set(Calendar.MINUTE, 0);
            data_final.set(Calendar.SECOND, 0);
            data_final.set(Calendar.MILLISECOND, 0);
            data_final.getTime();

            long intervalo = data_inicial.getTimeInMillis() - data_final.getTimeInMillis();
            int duracaoCadastro = (int) (intervalo / (1000 * 60 * 60 * 24 * 30)); // resultado em meses 
            System.out.println("Calculo de dias em Cadastro:" + duracaoCadastro);

            ConfiguraSistema configuraSistema = new ConfiguraSistema();
            int tempo_inadiplente = Integer.parseInt(configuraSistema.jtf_a_prazo_cadastro_mes.getText());

            if (duracaoCadastro < tempo_inadiplente) {
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }

    public void recalcularValores() {

        jtf_saldo.setText(janelapaiLocacao.jtf_saldo.getText());
        jtf_valor_total_locacao.setText(janelapaiLocacao.jtf_total_locacao.getText());
        jtf_valor_total_a_pagar.setText(janelapaiLocacao.jtf_total_a_pagar.getText());

        if (!jtf_valor_pago.getText().equals("")) {

            Moeda moeda = new Moeda();

            Double troco;
            Double desconto = moeda.getPrecoFormato(jtf_desconto.getText());
            jtf_desconto.setText(moeda.setPrecoFormat(jtf_desconto.getText().toString()));
            Double valor_pago = moeda.getPrecoFormato(jtf_valor_pago.getText());
            Double total_a_pagar = moeda.getPrecoFormato(jtf_valor_total_a_pagar.getText());

            if (total_a_pagar > 0 && total_a_pagar > desconto) {
                jtf_desconto.setText(moeda.setPrecoFormat(desconto.toString()));
                total_a_pagar = total_a_pagar - desconto;
                jtf_valor_total_a_pagar.setText(moeda.setPrecoFormat(total_a_pagar.toString()));
            } else if (total_a_pagar <= desconto) {
                jtf_desconto.setText(moeda.setPrecoFormat(total_a_pagar.toString()));
                desconto = moeda.getPrecoFormato(jtf_desconto.getText());
                total_a_pagar = 0.00;
                jtf_valor_total_a_pagar.setText(moeda.setPrecoFormat(total_a_pagar.toString()));
            }

            troco = valor_pago - (total_a_pagar);

            if (troco > 0) {
                jtf_troco.setText(moeda.setPrecoFormat(String.valueOf(troco)));
                jtf_debito_atual.setCaretColor(Color.black);
                jtf_debito_atual.setText("R$ 0,00");
            } else if (troco < 0) {
                jtf_troco.setText("R$ 0,00");
                troco = troco * (-1);
                jtf_debito_atual.setText(moeda.setPrecoFormat(String.valueOf(troco)));
                jtf_debito_atual.setCaretColor(Color.red);
            } else {
                jtf_troco.setText("R$ 0,00");
                jtf_debito_atual.setText("R$ 0,00");
                jtf_debito_atual.setCaretColor(Color.black);
            }

            jtf_valor_pago.setText(moeda.setPrecoFormat(String.valueOf(valor_pago)));

        } else if (jtf_valor_pago.getText().equals("")) {
            jtf_valor_pago.setText("R$ 0,00");
        }

    }

    public void setStatusTela(boolean status) {
        if (status) {
            this.setVisible(status);
        }
        this.setEnabled(status);
    }

    private void entrar() {

        if (validaLogin()) {
            if (verificaLogin()) {
                jtf_login.setText(acesso.getUsuario().getLogin());
                jb_salvar.setEnabled(true);
                if (acesso.getEscrever() == true) {
                    jtf_valor_pago.setEditable(true);
                    jtf_valor_pago.setEnabled(true);
                    jtf_desconto.setEditable(true);
                    jtf_desconto.setEnabled(true);
                    jtf_valor_pago.requestFocus();
                } else {
                    jtf_desconto.setText("R$ 0,00");
                    jtf_desconto.setEditable(false);
                    jtf_desconto.setEnabled(false);
                    jtf_valor_pago.setEditable(true);
                    jtf_valor_pago.setEnabled(true);
                    jtf_valor_pago.requestFocus();
                }
                ///Faz alguma coisa interessante
            } else {
                jpf_senha.requestFocus();
                jpf_senha.setText("");
                jtf_login.setText("");
                jtf_desconto.setText("R$ 0,00");
                jtf_valor_pago.setText("R$ 0,00");
                jtf_desconto.setEditable(false);
                jtf_desconto.setEnabled(false);
                jtf_valor_pago.setEditable(false);
                jtf_valor_pago.setEnabled(false);
                jb_salvar.setEnabled(false);
            }
        }

    }

    private boolean validaLogin() {
        String msgERRO = "Preencha os campos obrigatórios:\n";

        if (jpf_senha.getPassword().equals("")) {
            msgERRO = msgERRO + " *Senha\n";
        }

        if (!msgERRO.equals("Preencha os campos obrigatórios:\n")) {
            JOptionPane.showMessageDialog(this, msgERRO);
            return false;
        } else {
            return true;
        }

    }

    public List<Usuario> usuarios;
    public static AcessoUsuario acesso;

    public boolean verificaLogin() {
        pool = new Pool();
        UsuarioDAO usuarioControl = new UsuarioDAO(pool);
        acesso = usuarioControl.verificarPermissao(jpf_senha.getText().trim(), "br.com.locadora.view.EntradaCaixaLocacao");
        try {
            //verifica a senha
            char[] senha = jpf_senha.getPassword();
            char[] senhaDoBanco = acesso.getUsuario().getSenha().toCharArray();

            // verifica o tamanho da senha
            if (senha.length != senhaDoBanco.length) {
                JOptionPane.showMessageDialog(null, "Senha incorreta");
                return false; // se for diferente, retorna falso
            } else {
                for (int i = 0; i < senha.length; i++) {
                    if (senha[i] != senhaDoBanco[i]) {
                        JOptionPane.showMessageDialog(null, "Senha incorreta");
                        return false; // se for diferente, retorna falso
                    }
                }
            }

            return true;

        } catch (Exception e) {
            e.printStackTrace();

            System.out.println("Senha incorreta na Entrada de Caixa");
            return false;
        }

//        return true;
    }

    public void finalizarCaixa() {
        ArquivoConfiguracao conf = new ArquivoConfiguracao();

        //Envia a gravação da locação e envia o lancamento de caixa
        if (!conf.readPropertie("caixa").equals("")) {
            if (jb_logar.isEnabled() == true) {
                if (validaLogin()) {
                    if (verificaLogin()) {
                        if (janelapaiLocacao != null) {

                            fecharAtendimento();

                            jpf_senha.setEnabled(false);
                            jb_logar.setEnabled(false);
                            jtf_valor_pago.setEnabled(false);
                            jtf_desconto.setEnabled(false);
                            jb_salvar.setEnabled(false);
                            jb_imprimir.setEnabled(true);
                            jb_imprimir.requestFocus();

                            DefaultTableModel tb_locacao = (DefaultTableModel) AtendimentoLocacao.jtbl_locacao.getModel();
                            int rows = tb_locacao.getRowCount();
                            for (int i = rows - 1; i >= 0; i--) {
                                tb_locacao.removeRow(i);
                            }
                            janelapaiLocacao.jtf_codigo_cliente.setText("");
                            janelapaiLocacao.jtf_nome_cliente.setText("");

                            janelapaiLocacao.jtf_total_locacao.setText("R$ 0,00");
                            janelapaiLocacao.jtf_total_a_pagar.setText("R$ 0,00");
                            janelapaiLocacao.jtf_saldo.setText("R$ 0,00");
                            janelapaiLocacao.setTitle("Atendimento Locação");
                            janelapaiLocacao.jl_total_filmes.setText("Total de Objetos: 0");
                            janelapaiLocacao.jl_lancamento_aberto.setText("Pendente: 0");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Atendimento finalizado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Caixa padrão não definido. Favor verificar");
        }
    }

    public void acionarAtalho(java.awt.event.KeyEvent evt) {

        if (evt.getKeyCode() == KeyEvent.VK_F10) {
            jb_salvar.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            retornaJanelaPai();
        }
    }

    public void imprimir() {
        Usuario usuario = acesso.getUsuario();
        Printer imprimir = new Printer();
        String nome_arquivo = "Imprimir/comprovanteLocacao_" + janelapaiLocacao.dependente.getNome_dependente() + ".txt";
        imprimir.comprovanteLocacao(itensLocacaoSalvar, janelapaiLocacao.dependente, usuario, lancamento, nome_arquivo);
//        String nome_arquivo = "Imprimir/comprovanteLocacao_" + janelapaiLocacao.dependente.getNome_dependente() + ".txt";
        if (imprimir.imprimirArquivo(nome_arquivo)) {
            //Desabilita para não haver mais alteração
            jtf_valor_pago.setEditable(false);
            jtf_desconto.setEditable(false);

            retornaJanelaPai();

            File arquivo = new File(nome_arquivo);
            arquivo.deleteOnExit();
            arquivo.delete();
        }
    }
    List<Diaria> promocoes;

    public void checarPagamento() {
        moeda = new Moeda();
        Double valor_pagamento_a_vista = 0.0;
        Double valor_pago = moeda.getPrecoFormato(moeda.setPrecoFormat(jtf_valor_pago.getText()));

        for (int j = 0; j < janelapaiLocacao.copiasLocacao.size(); j++) {
            System.out.println("Pagamento a vista Sem promoção: " + janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getPagamento_a_vista());
            if (janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getPagamento_a_vista() != null) {
                if (janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getPagamento_a_vista() == true) {
                    valor_pagamento_a_vista = valor_pagamento_a_vista + janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getValor_promocao_locacao();
                    break;
                }
            }
        }

        System.out.println("Valor para pagamento a vista: " + valor_pagamento_a_vista);
        System.out.println("Valor pago: " + valor_pago);

        pool = new Pool();
        DiariaDAO diDAO = new DiariaDAO(pool);
        promocoes = diDAO.getDiariaPromocao();
        if (valor_pago < valor_pagamento_a_vista) {
            int selectedOption = JOptionPane.showConfirmDialog(this, "Autorizar promoção sem pagamento?", "Atenção", JOptionPane.YES_NO_OPTION);
            if (selectedOption == JOptionPane.YES_NO_OPTION) {
                pool = new Pool();
                UsuarioDAO usuarioControl = new UsuarioDAO(pool);
                acesso = usuarioControl.permissaoInterface(acesso.getUsuario().getLogin(), "br.com.locadora.view.EntradaCaixaLocacao");
                try {
                    if (acesso.getSuper_usuario() == false) {
                        for (int j = 0; j < janelapaiLocacao.copiasLocacao.size(); j++) {
                            System.out.println("Size promocoes: " + promocoes.size());
                            for (int x = 0; x < promocoes.size(); x++) {
                                if (janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getCodigo_promocao_locacao() == promocoes.get(x).getPromocaoLocacao().getCodigo_promocao_locacao()) {
                                    if (promocoes.get(x).getPromocaoLocacao().getPagamento_a_vista() == true) {
                                        PromocaoLocacao promocaoNull = new PromocaoLocacao();
                                        janelapaiLocacao.copiasLocacao.get(j).getDiaria().setPromocaoLocacao(promocaoNull);
                                        janelapaiLocacao.jtbl_locacao.setValueAt(moeda.setPrecoFormat(String.valueOf(janelapaiLocacao.copiasLocacao.get(j).getDiaria().getValor())), j, 2);
                                        janelapaiLocacao.jtbl_locacao.setValueAt("", j, 5);
                                        janelapaiLocacao.recalcularValorTotal();
                                        recalcularValores();
                                    }
                                }
                            }
                        }
                        JOptionPane.showMessageDialog(null, "Usuário sem permissão. Consultar o administrador");

                    } else if (acesso.getSuper_usuario() == false) {
                        for (int j = 0; j < janelapaiLocacao.copiasLocacao.size(); j++) {
                            System.out.println("Size promocoes: " + promocoes.size());
                            for (int x = 0; x < promocoes.size(); x++) {
                                if (janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getCodigo_promocao_locacao() == promocoes.get(x).getPromocaoLocacao().getCodigo_promocao_locacao()) {
                                    if (promocoes.get(x).getPromocaoLocacao().getPagamento_a_vista() == true) {
                                        PromocaoLocacao promocaoNull = new PromocaoLocacao();
                                        janelapaiLocacao.copiasLocacao.get(j).getDiaria().setPromocaoLocacao(promocaoNull);
                                        janelapaiLocacao.jtbl_locacao.setValueAt(moeda.setPrecoFormat(String.valueOf(janelapaiLocacao.copiasLocacao.get(j).getDiaria().getValor())), j, 2);
                                        janelapaiLocacao.jtbl_locacao.setValueAt("", j, 5);
                                        janelapaiLocacao.recalcularValorTotal();
                                        recalcularValores();
                                    }
                                }
                            }
                        }
                        JOptionPane.showMessageDialog(null, "Usuário sem permissão. Consultar o administrador");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage() + " Entre em contato com o administrador do sistema.");
                }

            } else {
                for (int j = 0; j < janelapaiLocacao.copiasLocacao.size(); j++) {
                    System.out.println("Size promocoes: " + promocoes.size());
                    for (int x = 0; x < promocoes.size(); x++) {
                        if (janelapaiLocacao.copiasLocacao.get(j).getDiaria().getPromocaoLocacao().getCodigo_promocao_locacao() == promocoes.get(x).getPromocaoLocacao().getCodigo_promocao_locacao()) {
                            if (promocoes.get(x).getPromocaoLocacao().getPagamento_a_vista() == true) {
                                PromocaoLocacao promocaoNull = new PromocaoLocacao();
                                janelapaiLocacao.copiasLocacao.get(j).getDiaria().setPromocaoLocacao(promocaoNull);
                                janelapaiLocacao.jtbl_locacao.setValueAt(moeda.setPrecoFormat(String.valueOf(janelapaiLocacao.copiasLocacao.get(j).getDiaria().getValor())), j, 2);
                                janelapaiLocacao.jtbl_locacao.setValueAt("", j, 5);
                                janelapaiLocacao.recalcularValorTotal();
                                recalcularValores();
                            }
                        }
                    }
                }
            }
        }
    }

    public void fecharAtendimento() {

        try {

            itensLocacaoSalvar = new ArrayList<>();
            Locacao locacao = new Locacao();
            locacao.setDependente(janelapaiLocacao.dependente);
            locacao.setUsuario(acesso.getUsuario());
            pool = new Pool();
            locacaoDAO = new LocacaoDAO(pool);
            locacao = locacaoDAO.salvar(locacao);

            moeda = new Moeda();
            Double valor_pago = moeda.getPrecoFormato(jtf_valor_pago.getText());
            Double troco = moeda.getPrecoFormato(jtf_troco.getText());
            Double valor_desconto = moeda.getPrecoFormato(jtf_desconto.getText());
            valor_pago = valor_pago - troco;
            Double valor_total_locacao = moeda.getPrecoFormato(jtf_valor_total_locacao.getText());
            Double valor_total_a_pagar = moeda.getPrecoFormato(jtf_valor_total_a_pagar.getText());
            Double saldo = 0.00;
            if (jtf_saldo.getForeground().equals(Color.BLACK)) {
                saldo = moeda.getPrecoFormato(jtf_saldo.getText());
            }

            ArquivoConfiguracao conf = new ArquivoConfiguracao();

            TipoServico tipoServico;
            lancamento = new Lancamento();
            lancamento.setValor_total(valor_total_locacao);
            lancamento.setSaldo_dia(saldo);
            lancamento.setDesconto(valor_desconto);
            lancamento.setDesconto_entrega_antecipada(0.00);
            lancamento.setValor_pago(moeda.getPrecoFormato(jtf_valor_pago.getText()));
            lancamento.setTroco(troco);
            lancamento.setValor_total_a_pagar(valor_total_a_pagar);
            lancamento.setDependente(janelapaiLocacao.dependente);
            tipoServico = new TipoServico();
            tipoServico.setCodigo_tipo_servico(1);
            lancamento.setTipoServico(tipoServico);
            lancamento.setUsuario(acesso.getUsuario());
            lancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
            lancamento.setLocacao(locacao);
            lancamento.setDevolucao(new Devolucao());
            lancamento.setVenda(new Venda());

            pool = new Pool();
            lancamentoDAO = new LancamentoDAO(pool);
            lancamento = lancamentoDAO.salvarLancamento(lancamento);
            List<ItemLancamento> itensLancamento = new ArrayList<>();
            ItemLancamento itemLancamento;

            Calendar data_atual = Calendar.getInstance();
            pool = new Pool();
            List<Lancamento> lancamentos = new ArrayList<Lancamento>();
            LancamentoDAO lancamentoDAO = new LancamentoDAO(pool);
            lancamentos = lancamentoDAO.getLancamentos(janelapaiLocacao.dependente.getCliente());

            if (saldo >= valor_total_locacao) {
                for (int i = 0; i < lancamentos.size(); i++) {
                    if (lancamentos.get(i).getSaldo() >= valor_total_locacao) {
                        //Diminui do Saldo
                        itemLancamento = new ItemLancamento();
                        itemLancamento.setData_lancamento(data_atual.getTime());
                        itemLancamento.setLancamento(lancamentos.get(i));
                        itemLancamento.setValor_lancamento(valor_total_locacao);
                        tipoServico = new TipoServico();
                        tipoServico.setCodigo_tipo_servico(13);
                        itemLancamento.setTipoServico(tipoServico);
                        itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                        itemLancamento.setUsuario(acesso.getUsuario());
                        itensLancamento.add(itemLancamento);
                        //Lança pagamento
                        itemLancamento = new ItemLancamento();
                        itemLancamento.setData_lancamento(data_atual.getTime());
                        itemLancamento.setLancamento(lancamento);
                        itemLancamento.setValor_lancamento(valor_total_locacao);
                        tipoServico = new TipoServico();
                        tipoServico.setCodigo_tipo_servico(13);
                        itemLancamento.setTipoServico(tipoServico);
                        itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                        itemLancamento.setUsuario(acesso.getUsuario());
                        itensLancamento.add(itemLancamento);
                        break;
                    } else if (lancamentos.get(i).getSaldo() < valor_total_locacao && lancamentos.get(i).getSaldo() > 0) {
                        //Diminui do Saldo
                        itemLancamento = new ItemLancamento();
                        itemLancamento.setData_lancamento(data_atual.getTime());
                        itemLancamento.setLancamento(lancamentos.get(i));
                        itemLancamento.setValor_lancamento(lancamentos.get(i).getSaldo());
                        tipoServico = new TipoServico();
                        tipoServico.setCodigo_tipo_servico(13);
                        itemLancamento.setTipoServico(tipoServico);
                        itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                        itemLancamento.setUsuario(acesso.getUsuario());
                        itensLancamento.add(itemLancamento);
                        //Lança pagamento
                        itemLancamento = new ItemLancamento();
                        itemLancamento.setData_lancamento(data_atual.getTime());
                        itemLancamento.setLancamento(lancamento);
                        itemLancamento.setValor_lancamento(lancamentos.get(i).getSaldo());
                        tipoServico = new TipoServico();
                        tipoServico.setCodigo_tipo_servico(13);
                        itemLancamento.setTipoServico(tipoServico);
                        itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                        itemLancamento.setUsuario(acesso.getUsuario());
                        itensLancamento.add(itemLancamento);
                        lancamentos.get(i).setSaldo(lancamentos.get(i).getSaldo() - valor_total_locacao);
                        valor_total_locacao = valor_total_locacao - lancamentos.get(i).getSaldo();
                    }
                }
            } else if (saldo < valor_total_locacao) {
                for (int i = 0; i < lancamentos.size(); i++) {
                    if (lancamentos.get(i).getSaldo() < valor_total_locacao && lancamentos.get(i).getSaldo() > 0) {
                        //Diminui do Saldo
                        itemLancamento = new ItemLancamento();
                        itemLancamento.setData_lancamento(data_atual.getTime());
                        itemLancamento.setLancamento(lancamentos.get(i));
                        itemLancamento.setValor_lancamento(lancamentos.get(i).getSaldo());
                        tipoServico = new TipoServico();
                        tipoServico.setCodigo_tipo_servico(13);
                        itemLancamento.setTipoServico(tipoServico);
                        itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                        itemLancamento.setUsuario(acesso.getUsuario());
                        itensLancamento.add(itemLancamento);
                        //Lança pagamento
                        itemLancamento = new ItemLancamento();
                        itemLancamento.setData_lancamento(data_atual.getTime());
                        itemLancamento.setLancamento(lancamento);
                        itemLancamento.setValor_lancamento(lancamentos.get(i).getSaldo());
                        tipoServico = new TipoServico();
                        tipoServico.setCodigo_tipo_servico(13);
                        itemLancamento.setTipoServico(tipoServico);
                        itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                        itemLancamento.setUsuario(acesso.getUsuario());
                        itensLancamento.add(itemLancamento);
                        lancamentos.get(i).setSaldo(lancamentos.get(i).getSaldo() - valor_total_locacao);
                        valor_total_locacao = valor_total_locacao - lancamentos.get(i).getSaldo();
                    }
                }
            }
            if (valor_pago > 0) {
                itemLancamento = new ItemLancamento();
                itemLancamento.setData_lancamento(data_atual.getTime());
                itemLancamento.setLancamento(lancamento);
                itemLancamento.setValor_lancamento(valor_pago);
                tipoServico = new TipoServico();
                tipoServico.setCodigo_tipo_servico(6);
                itemLancamento.setTipoServico(tipoServico);
                itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                itemLancamento.setUsuario(acesso.getUsuario());
                itensLancamento.add(itemLancamento);
            }
            if (valor_desconto > 0) {
                itemLancamento = new ItemLancamento();
                itemLancamento.setData_lancamento(data_atual.getTime());
                itemLancamento.setLancamento(lancamento);
                itemLancamento.setValor_lancamento(valor_desconto);
                tipoServico = new TipoServico();
                tipoServico.setCodigo_tipo_servico(3);
                itemLancamento.setTipoServico(tipoServico);
                itemLancamento.setCaixa(Integer.parseInt(conf.readPropertie("caixa")));
                itemLancamento.setUsuario(acesso.getUsuario());
                itensLancamento.add(itemLancamento);
            }

            pool = new Pool();
            lancamentoDAO = new LancamentoDAO(pool);
            lancamentoDAO.salvarItemLancamento(itensLancamento);

            List<Diaria> diariasAcumulativas = new ArrayList<Diaria>();
            pool = new Pool();
            DiariaDAO diaDAO = new DiariaDAO(pool);
            diariasAcumulativas = diaDAO.getTodasDiarias();
            for (int i = 0; i < janelapaiLocacao.jtbl_locacao.getRowCount(); i++) {
                System.out.println("==================================================");
                System.out.println("Inciar Verificação: " + janelapaiLocacao.copiasLocacao.get(i).getObjeto().getTitulo());
                System.out.println("Acumulativo: " + janelapaiLocacao.copiasLocacao.get(i).getDiaria().getAcumulativo());
                if (janelapaiLocacao.copiasLocacao.get(i).getDiaria().getAcumulativo() == true) {
                    for (int j = 0; j < diariasAcumulativas.size(); j++) {
                        if (diariasAcumulativas.size() > 0) {
                            System.out.println("CODIGO DIARIA - DIARIA: " + diariasAcumulativas.get(j).getCodigo_diaria() + " CODIGO DIARIA - COPIA: " + janelapaiLocacao.copiasLocacao.get(i).getDiaria().getCodigo_diaria());
                            if (diariasAcumulativas.get(j).getCodigo_diaria().equals(janelapaiLocacao.copiasLocacao.get(i).getDiaria().getCodigo_diaria())) {
                                System.out.println("Debug 1 - Quantidade de Dias: " + janelapaiLocacao.copiasLocacao.get(i).getDiaria().getDias());
                                System.out.println("Debug 2 - Quantidade de Dias Máximo: " + janelapaiLocacao.copiasLocacao.get(i).getDiaria().getMaximo_dias());
                                if ((diariasAcumulativas.get(j).getQuantidade_filme() * janelapaiLocacao.copiasLocacao.get(i).getDiaria().getDias()) < janelapaiLocacao.copiasLocacao.get(i).getDiaria().getMaximo_dias()) {
                                    diariasAcumulativas.get(j).setQuantidade_filme(diariasAcumulativas.get(j).getQuantidade_filme() + 1);
                                    diariasAcumulativas.get(j).setDias_previsto(diariasAcumulativas.get(j).getDias_previsto() + 1);
                                    System.out.println("Quantidade de filme: " + diariasAcumulativas.get(j).getQuantidade_filme() + " Dias Previsto: " + diariasAcumulativas.get(j).getDias_previsto());
                                } else {
                                    diariasAcumulativas.get(j).setQuantidade_filme(diariasAcumulativas.get(j).getQuantidade_filme() + 1);
                                    System.out.println("Quantidade de filme: " + diariasAcumulativas.get(j).getQuantidade_filme() + " Dias Previsto: " + diariasAcumulativas.get(j).getDias_previsto());
                                }
                            }
                        }
                    }
                } else {
                    for (int j = 0; j < diariasAcumulativas.size(); j++) {
                        if (diariasAcumulativas.size() > 0) {
                            System.out.println("CODIGO DIARIA - DIARIA: " + diariasAcumulativas.get(j).getCodigo_diaria() + " CODIGO DIARIA - COPIA: " + janelapaiLocacao.copiasLocacao.get(i).getDiaria().getCodigo_diaria());
                            if (diariasAcumulativas.get(j).getCodigo_diaria().equals(janelapaiLocacao.copiasLocacao.get(i).getDiaria().getCodigo_diaria())) {
                                diariasAcumulativas.get(j).setDias_previsto(diariasAcumulativas.get(j).getDias());
                            }
                        }
                    }
                }
                System.out.println("==================================================");
            }

            for (int i = 0; i < janelapaiLocacao.jtbl_locacao.getRowCount(); i++) {
                ItemLocacao itemLocacao = new ItemLocacao();

                PromocaoLocacao promocaoLocacao = janelapaiLocacao.copiasLocacao.get(i).getDiaria().getPromocaoLocacao();
                Diaria diaria = janelapaiLocacao.copiasLocacao.get(i).getDiaria();
                diaria.setPromocaoLocacao(promocaoLocacao);
                Objeto objeto = janelapaiLocacao.copiasLocacao.get(i).getObjeto();

                Copia copia = janelapaiLocacao.copiasLocacao.get(i);
                copia.setDiaria(diaria);
                copia.setObjeto(objeto);
                copia.setStatus("1");
                System.out.println("");
                if (copia.getDiaria().getPromocaoLocacao().getValor_promocao_locacao() != null) {
                    itemLocacao.setValor_locado(copia.getDiaria().getPromocaoLocacao().getValor_promocao_locacao());
                    System.out.println("Valor Locado da Promoção: " + copia.getDiaria().getPromocaoLocacao().getValor_promocao_locacao());
                } else {
                    itemLocacao.setValor_locado(copia.getDiaria().getValor());
                    System.out.println("Valor Locado Normal: " + copia.getDiaria().getValor());
                }
                if (valor_pago > 0) {
                    if (valor_pago < itemLocacao.getValor_locado()) {
                        itemLocacao.setValor_pago(valor_pago);
                    } else {
                        itemLocacao.setValor_pago(itemLocacao.getValor_locado());
                        valor_pago = valor_pago - itemLocacao.getValor_locado();
                    }
                } else {
                    itemLocacao.setValor_pago(0.00);
                }
                itemLocacao.setLocacao(locacao);
                itemLocacao.setCopia(copia);

                //Inserir a lógica da promoção de objetos e para cada um sera gravada  a data prevista de devolucao no banco e somar
                //conforme quantidade e regra de negócio
                Calendar cal = Calendar.getInstance();

                for (int d = 0; d < diariasAcumulativas.size(); d++) {
                    if (diariasAcumulativas.get(d).getCodigo_diaria() == janelapaiLocacao.copiasLocacao.get(i).getDiaria().getCodigo_diaria()) {
                        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + diariasAcumulativas.get(d).getDias_previsto());
                        System.out.println("Dias: " + diariasAcumulativas.get(d).getDias_previsto());
                        System.out.println("Day Month: " + cal.get(Calendar.DAY_OF_MONTH));
                        System.out.println("Data prevista: " + cal.getTime());
                    }
                }

                try {
                    if (janelapaiLocacao.copiasLocacao.get(i).getDiaria().getPacotePromocional().getDias_restantes() > 0) {
                        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + janelapaiLocacao.copiasLocacao.get(i).getDiaria().getPacotePromocional().getDias_restantes());
                        itemLocacao.setData_prevista(cal.getTime());
                        System.out.println("Data Prevista 1:" + cal.getTime());
                    } else {
                        itemLocacao.setData_prevista(cal.getTime());
                        System.out.println("Data Prevista 2:" + cal.getTime());
                    }
                } catch (Exception e) {
                    itemLocacao.setData_prevista(cal.getTime());
                }

                int dia = cal.get(cal.DAY_OF_WEEK);
                System.out.println("Dia da semana:" + dia);
                if (dia == 1) {
                    cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                    if (checarFeriado(cal) == false) {
                        itemLocacao.setData_prevista(cal.getTime());
                    } else {
                        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                        if (checarFeriado(cal) == false) {
                            itemLocacao.setData_prevista(cal.getTime());
                        } else {
                            cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                            if (checarFeriado(cal) == false) {
                                itemLocacao.setData_prevista(cal.getTime());
                            } else {
                                cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                                if (checarFeriado(cal) == false) {
                                    itemLocacao.setData_prevista(cal.getTime());
                                } else {
                                    cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                                    if (checarFeriado(cal) == false) {
                                        itemLocacao.setData_prevista(cal.getTime());
                                    } else {
                                        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                                        itemLocacao.setData_prevista(cal.getTime());
                                    }

                                }

                            }

                        }
                    }
                } else {
                    if (checarFeriado(cal) == false) {
                        itemLocacao.setData_prevista(cal.getTime());
                    } else {
                        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                        if (checarFeriado(cal) == false) {
                            itemLocacao.setData_prevista(cal.getTime());
                        } else {
                            cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                            if (checarFeriado(cal) == false) {
                                itemLocacao.setData_prevista(cal.getTime());
                            } else {
                                cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                                if (checarFeriado(cal) == false) {
                                    itemLocacao.setData_prevista(cal.getTime());
                                } else {
                                    cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                                    if (checarFeriado(cal) == false) {
                                        itemLocacao.setData_prevista(cal.getTime());
                                    } else {
                                        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) + 1);
                                        itemLocacao.setData_prevista(cal.getTime());
                                    }

                                }

                            }

                        }
                    }
                }
                
                itensLocacaoSalvar.add(itemLocacao);
                pool = new Pool();
                CopiaDAO copiaDAO = new CopiaDAO(pool);
                copiaDAO.alterarStatusFilme(copia);
            }

            pool = new Pool();

            locacaoDAO = new LocacaoDAO(pool);
            locacaoDAO.salvarItem(itensLocacaoSalvar);

        } catch (SQLException e) {
            System.out.println(e.getMessage() + "Problemas com a gravação: ");
            e.printStackTrace();
        } catch (NumberFormatException e) {
            System.out.println("Valor inválido: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public boolean checarFeriado(Calendar cal) {
        pool = new Pool();
        feriados = new ArrayList<>();
        FeriadoDAO feriadoDAO = new FeriadoDAO(pool);

        SimpleDateFormat in = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat out = new SimpleDateFormat("yyyy-MM-dd");

        String data_prev = out.format(cal.getTime());

        feriados = feriadoDAO.getFeriadoData(data_prev);
        if (feriados.size() > 0) {
            return true;
        } else {
            return false;
        }
    }

    public void retornaJanelaPai() {
        this.setVisible(false);
        if (janelapaiLocacao != null) {
            String nome_arquivo = "Imprimir/comprovanteLocacao_" + janelapaiLocacao.dependente.getNome_dependente() + ".txt";
            File arquivo = new File(nome_arquivo);
            arquivo.deleteOnExit();
            arquivo.delete();

            janelapaiLocacao.setStatusTela(true);
            janelapaiLocacao.jtf_nome_cliente.requestFocus();
        }
    }
}
